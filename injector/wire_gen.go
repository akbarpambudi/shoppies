// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"github.com/akbarpambudi/shoppies/configuration"
	"github.com/akbarpambudi/shoppies/product"
	"github.com/akbarpambudi/shoppies/product/delivery/http"
	"github.com/akbarpambudi/shoppies/product/repository"
	"github.com/akbarpambudi/shoppies/product/usecase"
	"github.com/google/wire"
)

// Injectors from configwire.go:

func InitializeAppConfigBinder() configuration.ConfigBinder {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	environmentConfigBinder := configuration.NewEnvironmentConfigBinder(environmentConfigBinderProperties)
	return environmentConfigBinder
}

var (
	_wireEnvironmentConfigBinderPropertiesValue = configuration.EnvironmentConfigBinderProperties{
		FileName: "app-config",
		Path:     "./env",
	}
)

// Injectors from productwire.go:

func InitializeProductDelivery() *http.ProductHttpDelivery {
	inMemoryProductRepository := repository.NewInMemoryProductRepository()
	productUseCaseImpl := usecase.NewProductUseCaseImpl(inMemoryProductRepository)
	productHttpDelivery := http.NewProductHttpDelivery(productUseCaseImpl)
	return productHttpDelivery
}

// productwire.go:

var (
	productServiceSets = wire.NewSet(repository.NewInMemoryProductRepository, wire.Bind(new(product.ProductRepository), new(*repository.InMemoryProductRepository)), usecase.NewProductUseCaseImpl, wire.Bind(new(product.ProductUseCase), new(*usecase.ProductUseCaseImpl)))
)
